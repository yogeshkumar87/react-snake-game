{"version":3,"sources":["util/Coordinate.js","util/Snake.js","components/Grid/Cell.js","util/Fruit.js","components/Grid/Row.js","components/Grid/Grid.js","components/Grid/index.js","components/Header.js","components/Overlay.js","components/FancyButton.js","components/FancyText.js","components/Score.js","components/ControlPanel/Button.js","components/ControlPanel/Timer.js","components/ControlPanel/Text.js","components/ControlPanel/index.js","util/GameControl.js","Reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["atPosition","x","y","diffx","diffy","generateCoordinate","size","random","isSnakeCoordinates","coordinates","filter","_ref","snakeX","snakeY","length","isCoordinatesMatching","getSnakeHead","snake","generateSnake","_generateCoordinate","range","map","value","flashAnimation","keyframes","_templateObject","flash","Cell","styled","div","_templateObject2","fruit","isGameOver","isBorder","isSnake","isFruit","css","_templateObject3","_templateObject4","_templateObject5","_templateObject6","StyledRow","props","Object","objectWithoutProperties","GRID","react_default","a","createElement","className","Grid_Cell","key","Row_templateObject","Grid","Grid_Row","Grid_templateObject","Header","h1","Header_templateObject","Overlay","Overlay_templateObject","FancyButton","button","FancyButton_templateObject","FancyText","FancyText_templateObject","Text","h4","Score_templateObject","BigText","h3","Score_templateObject2","Score","children","Button","Button_templateObject","Timer","_ref$pause","pause","_ref$reset","reset","_useState","useState","_useState2","slicedToArray","ms","setMs","intervalRef","useRef","useEffect","current","clearInterval","startTime","Date","now","id","setInterval","seconds","Math","floor","minutes","concat","toString","padStart","convertMS","h6","Text_templateObject","Container","ControlPanel_templateObject","hide","ControlPanel","play","score","togglePlay","ControlPanel_Timer","timer","ControlPanel_Text","ControlPanel_Button","onClick","DIRECTION","37","38","39","40","MOVE","LEFT","newX","UP","newY","RIGHT","DOWN","reducer","state","action","type","direction","objectSpread","barrierCoordinates","_getSnakeHead","tail","slice","getSnakeTail","isSnakeHit","isSnakeEaten","_getSnakeHead2","isSnakeHaveEatenFruit","currentSnakeHead","newSnakeHead","newSnakeTail","getSnakeWithoutEnd","newFruit","newScore","parseInt","toConsumableArray","console","log","Error","GRID_SIZE","initialState","App","_useReducer","useReducer","GameReducer","_useReducer2","dispatch","changeDirection","e","keyCode","window","addEventListener","removeEventListener","interval","components_Header","components_ControlPanel","components_Overlay","Fragment","components_Score","components_FancyText","components_FancyButton","components_Grid","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f100f29e.chunk.js","sourcesContent":["import { random } from 'lodash';\r\n\r\nconst atPosition = (x, y, diffx, diffy) => x === diffx && y === diffy;\r\n\r\nconst generateCoordinate = size => {\r\n    return {\r\n        x: random(1, size - 2),\r\n        y: random(1, size - 2)\r\n    };\r\n};\r\n\r\nconst isCoordinatesMatching = (x, y, coordinates) => {\r\n    const matchingCoordinates = coordinates.filter(({ x: snakeX, y: snakeY }) =>\r\n        atPosition(x, y, snakeX, snakeY)\r\n    );\r\n\r\n    return matchingCoordinates.length;\r\n};\r\n\r\nexport { generateCoordinate, atPosition, isCoordinatesMatching };\r\n","import { range } from 'lodash';\r\nimport {\r\n    isCoordinatesMatching,\r\n    atPosition,\r\n    generateCoordinate\r\n} from './Coordinate';\r\n\r\nconst isSnakeCoordinates = (x, y, coordinates) =>\r\n    isCoordinatesMatching(x, y, coordinates);\r\n\r\nconst getSnakeHead = snake => snake[0];\r\n\r\nconst isSnakeHead = (x, y, snake) => {\r\n    const head = getSnakeHead(snake);\r\n\r\n    return atPosition(x, y, head.x, head.y);\r\n};\r\n\r\nconst getSnakeTail = snake => snake.slice(1);\r\nconst getSnakeWithoutEnd = snake => snake.slice(0, snake.length - 1);\r\n\r\nconst isSnakeHit = (snake, barrierCoordinates) => {\r\n    const { x, y } = getSnakeHead(snake);\r\n    const tail = getSnakeTail(snake);\r\n\r\n    return isSnakeCoordinates(x, y, barrierCoordinates || tail);\r\n};\r\n\r\nconst isSnakeHaveEatenFruit = (snake, fruit) => {\r\n    const { x, y } = getSnakeHead(snake);\r\n    return atPosition(x, y, fruit.x, fruit.y);\r\n};\r\n\r\nconst generateSnake = size => {\r\n    const { x, y } = generateCoordinate(size - 10);\r\n\r\n    let values = range(y, y + 5);\r\n    return values.map(value => ({ x, y: value }));\r\n};\r\n\r\nexport {\r\n    isSnakeCoordinates,\r\n    getSnakeHead,\r\n    isSnakeHit,\r\n    isSnakeHaveEatenFruit,\r\n    generateSnake,\r\n    isSnakeHead,\r\n    getSnakeTail,\r\n    getSnakeWithoutEnd\r\n};\r\n","import React from 'react';\r\nimport styled, { css, keyframes } from 'styled-components';\r\nimport { flash } from 'react-animations';\r\nimport { isSnakeCoordinates } from '../../util/Snake';\r\nimport { isFruit } from '../../util/Fruit';\r\n\r\nconst flashAnimation = keyframes`${flash}`;\r\n\r\nconst Cell = styled.div`\r\n    border-color: #ecf0f1;\r\n    width: 15px;\r\n    height: 15px;\r\n\r\n    ${({ x, y, snake, fruit, size, isGameOver }) => {\r\n        const isBorder = x === 0 || y === 0 || x === size - 1 || y === size - 1;\r\n        const isSnake = isSnakeCoordinates(x, y, snake);\r\n\r\n        if (isFruit(x, y, fruit)) {\r\n            return css`\r\n                background: #7f0000;\r\n            `;\r\n        }\r\n\r\n        if (isBorder) {\r\n            return css`\r\n                background: #ecf0f1;\r\n            `;\r\n        }\r\n\r\n        if (isSnake) {\r\n            if (isGameOver) {\r\n                return css`\r\n                    border-radius: 50%;\r\n                    background: #c9a100;\r\n                    animation: 1s ${flashAnimation};\r\n                `;\r\n            }\r\n\r\n            return css`\r\n                border-radius: 50%;\r\n                background: #c9a100;\r\n            `;\r\n        }\r\n    }}\r\n`;\r\n\r\nexport default Cell;\r\n","import { atPosition } from './Coordinate';\r\n\r\nconst isFruit = (x, y, fruit) => {\r\n    return atPosition(x, y, fruit.x, fruit.y);\r\n};\r\n\r\nexport { isFruit };\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport range from 'lodash/range';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Row = ({ y, size, snake, fruit, isGameOver, ...props }) => {\r\n    const GRID = range(size);\r\n    return (\r\n        <div className={props.className}>\r\n            {GRID.map(x => (\r\n                <Cell\r\n                    x={x}\r\n                    y={y}\r\n                    key={x}\r\n                    size={size}\r\n                    snake={snake}\r\n                    fruit={fruit}\r\n                    isGameOver={isGameOver}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst StyledRow = styled(Row)`\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\nexport default StyledRow;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport range from 'lodash/range';\r\n\r\nimport Row from './Row';\r\n\r\nconst Grid = ({ size, snake, fruit, isGameOver, ...props }) => {\r\n    const GRID = range(size);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {GRID.map(y => (\r\n                <Row\r\n                    y={y}\r\n                    key={y}\r\n                    size={size}\r\n                    snake={snake}\r\n                    fruit={fruit}\r\n                    isGameOver={isGameOver}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst StyledGrid = styled(Grid)`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport default StyledGrid;\r\n","import Grid from './Grid';\r\n\r\nexport default Grid;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.h1`\r\n    font-family: 'Indie Flower', cursive;\r\n    color: #ecf0f1;\r\n    text-align: center;\r\n    font-size: 4em;\r\n    margin: 0;\r\n`;\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Overlay = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n    z-index: 9999;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`;\r\n\r\nexport default Overlay;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FancyButton = styled.button`\r\n    margin: 0 auto;\r\n    padding: 0px 20px;\r\n    background-color: #fff;\r\n    border: 2px solid #fff;\r\n    font-size: 20px;\r\n    font-family: 'Permanent Marker', cursive;\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:active {\r\n        transform: scale(0.95);\r\n    }\r\n`;\r\n\r\nexport default FancyButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FancyText = styled.h1`\r\n    font-family: 'Permanent Marker', cursive;\r\n    text-align: center;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n`;\r\n\r\nexport default FancyText;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Text = styled.h4`\r\n    color: #fff;\r\n    font-family: 'Permanent Marker', cursive;\r\n    margin: 0;\r\n    text-align: center;\r\n`;\r\n\r\nconst BigText = styled.h3`\r\n    text-align: center;\r\n    margin-bottom: 0;\r\n    font-size: 1.8em;\r\n    margin-top: 2px;\r\n    font-family: 'Permanent Marker', cursive;\r\n    color: #fff;\r\n`;\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div>\r\n            <Text>Score</Text>\r\n            <BigText>{props.children}</BigText>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Score;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    margin: 0;\r\n    background-color: transparent;\r\n    padding: 1px 10px;\r\n    cursor: pointer;\r\n    outline: none;\r\n    border: 0;\r\n    color: #ecf0f1;\r\n    font-size: 1.2rem;\r\n    font-family: 'Permanent Marker', cursive;\r\n\r\n    &:active {\r\n        font-size: 1.3rem;\r\n    }\r\n`;\r\n\r\nexport default Button;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\n\r\nfunction Timer({ pause = true, reset = false, ...props }) {\r\n    const [ms, setMs] = useState(0);\r\n\r\n    const intervalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (pause) {\r\n            if (intervalRef.current) {\r\n                clearInterval(intervalRef.current);\r\n            }\r\n        } else {\r\n            const startTime = Date.now() - ms;\r\n            const id = setInterval(() => {\r\n                setMs(Date.now() - startTime);\r\n            }, 1000);\r\n            intervalRef.current = id;\r\n        }\r\n\r\n        if (reset) {\r\n            setMs(0);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(intervalRef.current);\r\n        };\r\n    }, [ms, pause, reset]);\r\n\r\n    const convertMS = ms => {\r\n        if (ms) {\r\n            const seconds = Math.floor((ms % (1000 * 60)) / 1000);\r\n            const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n            return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n        }\r\n\r\n        return '0:00';\r\n    };\r\n\r\n    return <div>{props.children(convertMS(ms))}</div>;\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Text = styled.h6`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1.2rem;\r\n    display: inline-block;\r\n    color: #ecf0f1\r\n    font-family: 'Permanent Marker', cursive;\r\n`;\r\n\r\nexport default Text;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\nimport Timer from './Timer';\r\nimport Text from './Text';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex: 1;\r\n    width: 400px;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    padding: 5px;\r\n    visibility: ${props => {\r\n        if (props.hide) {\r\n            return 'hidden';\r\n        }\r\n\r\n        return 'visible';\r\n    }};\r\n`;\r\n\r\nfunction ControlPanel(props) {\r\n    const { play, isGameOver, score, togglePlay } = props;\r\n\r\n    return (\r\n        <Container hide={isGameOver || !play}>\r\n            <Timer pause={!play} reset={isGameOver}>\r\n                {timer => <Text>time :- {timer}</Text>}\r\n            </Timer>\r\n            <Button onClick={togglePlay}>Pause</Button>\r\n            <Text>score :- {score}</Text>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ControlPanel;\r\n","const DIRECTION = {\r\n    37: 'LEFT',\r\n    38: 'UP',\r\n    39: 'RIGHT',\r\n    40: 'DOWN'\r\n};\r\n\r\nconst MOVE = {\r\n    LEFT: (x, y, size) => {\r\n        let newX = x - 1;\r\n        if (newX === 0) {\r\n            newX = size - 2;\r\n        }\r\n        // console.log(x, newX, size);\r\n        return { x: newX, y };\r\n    },\r\n    UP: (x, y, size) => {\r\n        let newY = y - 1;\r\n        if (newY === 0) {\r\n            newY = size - 2;\r\n        }\r\n        // console.log(x, newY, size);\r\n        return { x, y: newY };\r\n    },\r\n    RIGHT: (x, y, size) => {\r\n        let newX = x + 1;\r\n\r\n        // console.log(x, newX, size);\r\n        if (newX === size - 1) {\r\n            newX = 1;\r\n        }\r\n        return { x: newX, y };\r\n    },\r\n    DOWN: (x, y, size) => {\r\n        let newY = y + 1;\r\n        if (newY === size - 1) {\r\n            newY = 1;\r\n        }\r\n        // console.log(x, newY, size);\r\n        return { x, y: newY };\r\n    }\r\n};\r\n\r\nexport { DIRECTION, MOVE };\r\n","import { MOVE } from '../util/GameControl';\r\nimport { generateCoordinate } from '../util/Coordinate';\r\nimport {\r\n    isSnakeHaveEatenFruit,\r\n    getSnakeHead,\r\n    getSnakeWithoutEnd,\r\n    isSnakeHit,\r\n    generateSnake\r\n} from '../util/Snake';\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_SNAKE_DIRECTION': {\r\n            const { direction } = action;\r\n            return {\r\n                ...state,\r\n                direction\r\n            };\r\n        }\r\n\r\n        case 'MOVE_SNAKE': {\r\n            const { snake, fruit, direction, size, score, play } = state;\r\n\r\n            if (!play) {\r\n                return { ...state };\r\n            } else if (isSnakeHit(snake)) {\r\n                return {\r\n                    ...state,\r\n                    play: false,\r\n                    isGameOver: true\r\n                };\r\n            } else {\r\n                const isSnakeEaten = isSnakeHaveEatenFruit(snake, fruit);\r\n\r\n                const currentSnakeHead = getSnakeHead(snake);\r\n\r\n                const newSnakeHead = MOVE[direction](\r\n                    currentSnakeHead.x,\r\n                    currentSnakeHead.y,\r\n                    size\r\n                );\r\n\r\n                const newSnakeTail = isSnakeEaten\r\n                    ? state.snake\r\n                    : getSnakeWithoutEnd(snake);\r\n\r\n                const newFruit = isSnakeEaten\r\n                    ? generateCoordinate(size)\r\n                    : fruit;\r\n\r\n                const newScore = isSnakeEaten\r\n                    ? (parseInt(score) + 1).toString().padStart(5, '0')\r\n                    : score;\r\n\r\n                return {\r\n                    ...state,\r\n                    score: newScore,\r\n                    snake: [newSnakeHead, ...newSnakeTail],\r\n                    fruit: newFruit\r\n                };\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_PLAY': {\r\n            console.log('Game Toggle');\r\n\r\n            const { isGameOver, play, size } = state;\r\n\r\n            if (isGameOver) {\r\n                return {\r\n                    ...state,\r\n                    isGameOver: false,\r\n                    play: !play,\r\n                    score: '000',\r\n                    snake: generateSnake(size),\r\n                    fruit: generateCoordinate(size)\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                play: isGameOver ? play : !play\r\n            };\r\n        }\r\n\r\n        default:\r\n            throw new Error();\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport Grid from './components/Grid';\r\nimport Header from './components/Header';\r\n\r\nimport Overlay from './components/Overlay';\r\nimport FancyButton from './components/FancyButton';\r\nimport FancyText from './components/FancyText';\r\nimport Score from './components/Score';\r\nimport ControlPanel from './components/ControlPanel';\r\n\r\nimport { DIRECTION } from './util/GameControl';\r\nimport { generateSnake } from './util/Snake';\r\nimport { generateCoordinate } from './util/Coordinate';\r\n\r\nimport GameReducer from './Reducers';\r\n\r\nimport './App.css';\r\n\r\nconst GRID_SIZE = 30;\r\n\r\nconst initialState = {\r\n    score: '000',\r\n    size: GRID_SIZE,\r\n    direction: DIRECTION[39],\r\n    isGameOver: false,\r\n    play: false,\r\n    snake: generateSnake(GRID_SIZE),\r\n    fruit: generateCoordinate(GRID_SIZE)\r\n};\r\n\r\nfunction App() {\r\n    const [state, dispatch] = useReducer(GameReducer, initialState);\r\n\r\n    const changeDirection = e => {\r\n        const direction = DIRECTION[e.keyCode];\r\n\r\n        if (direction) {\r\n            dispatch({\r\n                type: 'CHANGE_SNAKE_DIRECTION',\r\n                direction\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keyup', changeDirection, false);\r\n\r\n        return () => {\r\n            window.removeEventListener('keyup', changeDirection, false);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const snakeMovementChecker = () => {\r\n            dispatch({\r\n                type: 'MOVE_SNAKE'\r\n            });\r\n        };\r\n\r\n        console.log('Setting Interval');\r\n        const interval = setInterval(snakeMovementChecker, 150);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [dispatch]);\r\n\r\n    const togglePlay = e => {\r\n        dispatch({\r\n            type: 'TOGGLE_PLAY'\r\n        });\r\n    };\r\n\r\n    const { play, isGameOver, score, snake, fruit } = state;\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <Header>Snake Game</Header>\r\n            <div className=\"container\">\r\n                <ControlPanel\r\n                    play={play}\r\n                    isGameOver={isGameOver}\r\n                    score={score}\r\n                    togglePlay={togglePlay}\r\n                />\r\n\r\n                <div className=\"game-grid\">\r\n                    {!play && (\r\n                        <Overlay>\r\n                            {isGameOver && (\r\n                                <>\r\n                                    <Score>{score}</Score>\r\n                                    <FancyText>game over</FancyText>\r\n                                </>\r\n                            )}\r\n\r\n                            <FancyButton onClick={togglePlay}>Play</FancyButton>\r\n                        </Overlay>\r\n                    )}\r\n\r\n                    <Grid\r\n                        size={GRID_SIZE}\r\n                        snake={snake}\r\n                        fruit={fruit}\r\n                        isGameOver={isGameOver}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}